/* Auto-generated by genmsg_cpp for file /home/ghaessig/fuerte_workspace/sandbox/differential_drive/msg/Encoders.msg */
#ifndef DIFFERENTIAL_DRIVE_MESSAGE_ENCODERS_H
#define DIFFERENTIAL_DRIVE_MESSAGE_ENCODERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace differential_drive
{
template <class ContainerAllocator>
struct Encoders_ {
  typedef Encoders_<ContainerAllocator> Type;

  Encoders_()
  : delta_encoder1(0)
  , delta_encoder2(0)
  , timestamp(0)
  {
  }

  Encoders_(const ContainerAllocator& _alloc)
  : delta_encoder1(0)
  , delta_encoder2(0)
  , timestamp(0)
  {
  }

  typedef int32_t _delta_encoder1_type;
  int32_t delta_encoder1;

  typedef int32_t _delta_encoder2_type;
  int32_t delta_encoder2;

  typedef int32_t _timestamp_type;
  int32_t timestamp;


  typedef boost::shared_ptr< ::differential_drive::Encoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differential_drive::Encoders_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Encoders
typedef  ::differential_drive::Encoders_<std::allocator<void> > Encoders;

typedef boost::shared_ptr< ::differential_drive::Encoders> EncodersPtr;
typedef boost::shared_ptr< ::differential_drive::Encoders const> EncodersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::differential_drive::Encoders_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::differential_drive::Encoders_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace differential_drive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::differential_drive::Encoders_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::differential_drive::Encoders_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::differential_drive::Encoders_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d8c7ced448521f79c8f9e2cb159a680";
  }

  static const char* value(const  ::differential_drive::Encoders_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4d8c7ced448521f7ULL;
  static const uint64_t static_value2 = 0x9c8f9e2cb159a680ULL;
};

template<class ContainerAllocator>
struct DataType< ::differential_drive::Encoders_<ContainerAllocator> > {
  static const char* value() 
  {
    return "differential_drive/Encoders";
  }

  static const char* value(const  ::differential_drive::Encoders_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::differential_drive::Encoders_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Change of encoders during timestamp millisseconds\n\
\n\
int32 delta_encoder1\n\
int32 delta_encoder2\n\
\n\
\n\
int32 timestamp\n\
\n\
\n\
";
  }

  static const char* value(const  ::differential_drive::Encoders_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::differential_drive::Encoders_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::differential_drive::Encoders_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.delta_encoder1);
    stream.next(m.delta_encoder2);
    stream.next(m.timestamp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Encoders_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differential_drive::Encoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::differential_drive::Encoders_<ContainerAllocator> & v) 
  {
    s << indent << "delta_encoder1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.delta_encoder1);
    s << indent << "delta_encoder2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.delta_encoder2);
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIFFERENTIAL_DRIVE_MESSAGE_ENCODERS_H

