/* Auto-generated by genmsg_cpp for file /home/ghaessig/fuerte_workspace/sandbox/differential_drive/msg/Sharp.msg */
#ifndef DIFFERENTIAL_DRIVE_MESSAGE_SHARP_H
#define DIFFERENTIAL_DRIVE_MESSAGE_SHARP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace differential_drive
{
template <class ContainerAllocator>
struct Sharp_ {
  typedef Sharp_<ContainerAllocator> Type;

  Sharp_()
  : u0(0)
  , u1(0)
  , u2(0)
  , u3(0)
  , u4(0)
  , u5(0)
  , u6(0)
  , u7(0)
  {
  }

  Sharp_(const ContainerAllocator& _alloc)
  : u0(0)
  , u1(0)
  , u2(0)
  , u3(0)
  , u4(0)
  , u5(0)
  , u6(0)
  , u7(0)
  {
  }

  typedef uint16_t _u0_type;
  uint16_t u0;

  typedef uint16_t _u1_type;
  uint16_t u1;

  typedef uint16_t _u2_type;
  uint16_t u2;

  typedef uint16_t _u3_type;
  uint16_t u3;

  typedef uint16_t _u4_type;
  uint16_t u4;

  typedef uint16_t _u5_type;
  uint16_t u5;

  typedef uint16_t _u6_type;
  uint16_t u6;

  typedef uint16_t _u7_type;
  uint16_t u7;


  typedef boost::shared_ptr< ::differential_drive::Sharp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differential_drive::Sharp_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Sharp
typedef  ::differential_drive::Sharp_<std::allocator<void> > Sharp;

typedef boost::shared_ptr< ::differential_drive::Sharp> SharpPtr;
typedef boost::shared_ptr< ::differential_drive::Sharp const> SharpConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::differential_drive::Sharp_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::differential_drive::Sharp_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace differential_drive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::differential_drive::Sharp_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::differential_drive::Sharp_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::differential_drive::Sharp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9e17fb25fb2f8b8cf0b60887d5e8cc66";
  }

  static const char* value(const  ::differential_drive::Sharp_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9e17fb25fb2f8b8cULL;
  static const uint64_t static_value2 = 0xf0b60887d5e8cc66ULL;
};

template<class ContainerAllocator>
struct DataType< ::differential_drive::Sharp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "differential_drive/Sharp";
  }

  static const char* value(const  ::differential_drive::Sharp_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::differential_drive::Sharp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 u0\n\
uint16 u1\n\
uint16 u2\n\
uint16 u3\n\
uint16 u4\n\
uint16 u5\n\
uint16 u6\n\
uint16 u7\n\
\n\
";
  }

  static const char* value(const  ::differential_drive::Sharp_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::differential_drive::Sharp_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::differential_drive::Sharp_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.u0);
    stream.next(m.u1);
    stream.next(m.u2);
    stream.next(m.u3);
    stream.next(m.u4);
    stream.next(m.u5);
    stream.next(m.u6);
    stream.next(m.u7);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Sharp_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differential_drive::Sharp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::differential_drive::Sharp_<ContainerAllocator> & v) 
  {
    s << indent << "u0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u0);
    s << indent << "u1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u1);
    s << indent << "u2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u2);
    s << indent << "u3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u3);
    s << indent << "u4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u4);
    s << indent << "u5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u5);
    s << indent << "u6: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u6);
    s << indent << "u7: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u7);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIFFERENTIAL_DRIVE_MESSAGE_SHARP_H

