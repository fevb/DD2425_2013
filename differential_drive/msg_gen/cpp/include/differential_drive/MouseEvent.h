/* Auto-generated by genmsg_cpp for file /home/ghaessig/fuerte_workspace/sandbox/differential_drive/msg/MouseEvent.msg */
#ifndef DIFFERENTIAL_DRIVE_MESSAGE_MOUSEEVENT_H
#define DIFFERENTIAL_DRIVE_MESSAGE_MOUSEEVENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace differential_drive
{
template <class ContainerAllocator>
struct MouseEvent_ {
  typedef MouseEvent_<ContainerAllocator> Type;

  MouseEvent_()
  : timestamp(0.0)
  , dx(0)
  , dy(0)
  , button(0)
  , pressed(0)
  {
  }

  MouseEvent_(const ContainerAllocator& _alloc)
  : timestamp(0.0)
  , dx(0)
  , dy(0)
  , button(0)
  , pressed(0)
  {
  }

  typedef double _timestamp_type;
  double timestamp;

  typedef int16_t _dx_type;
  int16_t dx;

  typedef int16_t _dy_type;
  int16_t dy;

  typedef uint8_t _button_type;
  uint8_t button;

  typedef uint8_t _pressed_type;
  uint8_t pressed;


  typedef boost::shared_ptr< ::differential_drive::MouseEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differential_drive::MouseEvent_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MouseEvent
typedef  ::differential_drive::MouseEvent_<std::allocator<void> > MouseEvent;

typedef boost::shared_ptr< ::differential_drive::MouseEvent> MouseEventPtr;
typedef boost::shared_ptr< ::differential_drive::MouseEvent const> MouseEventConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::differential_drive::MouseEvent_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::differential_drive::MouseEvent_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace differential_drive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::differential_drive::MouseEvent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::differential_drive::MouseEvent_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::differential_drive::MouseEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ef8c9f3ac43b76bcf800e7d5001209fb";
  }

  static const char* value(const  ::differential_drive::MouseEvent_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xef8c9f3ac43b76bcULL;
  static const uint64_t static_value2 = 0xf800e7d5001209fbULL;
};

template<class ContainerAllocator>
struct DataType< ::differential_drive::MouseEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "differential_drive/MouseEvent";
  }

  static const char* value(const  ::differential_drive::MouseEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::differential_drive::MouseEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 timestamp\n\
int16 dx\n\
int16 dy\n\
uint8 button\n\
uint8 pressed\n\
";
  }

  static const char* value(const  ::differential_drive::MouseEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::differential_drive::MouseEvent_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::differential_drive::MouseEvent_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.dx);
    stream.next(m.dy);
    stream.next(m.button);
    stream.next(m.pressed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MouseEvent_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differential_drive::MouseEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::differential_drive::MouseEvent_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "dx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dy);
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
    s << indent << "pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pressed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIFFERENTIAL_DRIVE_MESSAGE_MOUSEEVENT_H

