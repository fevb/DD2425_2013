/* Auto-generated by genmsg_cpp for file /home/ghaessig/fuerte_workspace/sandbox/differential_drive/msg/Path.msg */
#ifndef DIFFERENTIAL_DRIVE_MESSAGE_PATH_H
#define DIFFERENTIAL_DRIVE_MESSAGE_PATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace differential_drive
{
template <class ContainerAllocator>
struct Path_ {
  typedef Path_<ContainerAllocator> Type;

  Path_()
  : x()
  , y()
  , theta()
  , carrot_x()
  , carrot_y()
  {
  }

  Path_(const ContainerAllocator& _alloc)
  : x(_alloc)
  , y(_alloc)
  , theta(_alloc)
  , carrot_x(_alloc)
  , carrot_y(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  x;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  y;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _theta_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  theta;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _carrot_x_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  carrot_x;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _carrot_y_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  carrot_y;


  typedef boost::shared_ptr< ::differential_drive::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differential_drive::Path_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Path
typedef  ::differential_drive::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::differential_drive::Path> PathPtr;
typedef boost::shared_ptr< ::differential_drive::Path const> PathConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::differential_drive::Path_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::differential_drive::Path_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace differential_drive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::differential_drive::Path_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::differential_drive::Path_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::differential_drive::Path_<ContainerAllocator> > {
  static const char* value() 
  {
    return "43baa9af561e2db58064fd7cbd905ad1";
  }

  static const char* value(const  ::differential_drive::Path_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x43baa9af561e2db5ULL;
  static const uint64_t static_value2 = 0x8064fd7cbd905ad1ULL;
};

template<class ContainerAllocator>
struct DataType< ::differential_drive::Path_<ContainerAllocator> > {
  static const char* value() 
  {
    return "differential_drive/Path";
  }

  static const char* value(const  ::differential_drive::Path_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::differential_drive::Path_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] x\n\
float64[] y\n\
float64[] theta\n\
float64[] carrot_x\n\
float64[] carrot_y\n\
";
  }

  static const char* value(const  ::differential_drive::Path_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::differential_drive::Path_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.theta);
    stream.next(m.carrot_x);
    stream.next(m.carrot_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Path_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differential_drive::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::differential_drive::Path_<ContainerAllocator> & v) 
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.theta[i]);
    }
    s << indent << "carrot_x[]" << std::endl;
    for (size_t i = 0; i < v.carrot_x.size(); ++i)
    {
      s << indent << "  carrot_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.carrot_x[i]);
    }
    s << indent << "carrot_y[]" << std::endl;
    for (size_t i = 0; i < v.carrot_y.size(); ++i)
    {
      s << indent << "  carrot_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.carrot_y[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIFFERENTIAL_DRIVE_MESSAGE_PATH_H

