/* Auto-generated by genmsg_cpp for file /home/ghaessig/fuerte_workspace/sandbox/differential_drive/msg/AnalogC.msg */
#ifndef DIFFERENTIAL_DRIVE_MESSAGE_ANALOGC_H
#define DIFFERENTIAL_DRIVE_MESSAGE_ANALOGC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace differential_drive
{
template <class ContainerAllocator>
struct AnalogC_ {
  typedef AnalogC_<ContainerAllocator> Type;

  AnalogC_()
  : ch1(0)
  , ch2(0)
  , ch3(0)
  , ch4(0)
  , ch5(0)
  , ch6(0)
  , ch7(0)
  , ch8(0)
  , on_batt(0)
  , cell1(0.0)
  , cell2(0.0)
  , cell3(0.0)
  {
  }

  AnalogC_(const ContainerAllocator& _alloc)
  : ch1(0)
  , ch2(0)
  , ch3(0)
  , ch4(0)
  , ch5(0)
  , ch6(0)
  , ch7(0)
  , ch8(0)
  , on_batt(0)
  , cell1(0.0)
  , cell2(0.0)
  , cell3(0.0)
  {
  }

  typedef uint16_t _ch1_type;
  uint16_t ch1;

  typedef uint16_t _ch2_type;
  uint16_t ch2;

  typedef uint16_t _ch3_type;
  uint16_t ch3;

  typedef uint16_t _ch4_type;
  uint16_t ch4;

  typedef uint16_t _ch5_type;
  uint16_t ch5;

  typedef uint16_t _ch6_type;
  uint16_t ch6;

  typedef uint16_t _ch7_type;
  uint16_t ch7;

  typedef uint16_t _ch8_type;
  uint16_t ch8;

  typedef uint8_t _on_batt_type;
  uint8_t on_batt;

  typedef float _cell1_type;
  float cell1;

  typedef float _cell2_type;
  float cell2;

  typedef float _cell3_type;
  float cell3;


  typedef boost::shared_ptr< ::differential_drive::AnalogC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differential_drive::AnalogC_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AnalogC
typedef  ::differential_drive::AnalogC_<std::allocator<void> > AnalogC;

typedef boost::shared_ptr< ::differential_drive::AnalogC> AnalogCPtr;
typedef boost::shared_ptr< ::differential_drive::AnalogC const> AnalogCConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::differential_drive::AnalogC_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::differential_drive::AnalogC_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace differential_drive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::differential_drive::AnalogC_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::differential_drive::AnalogC_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::differential_drive::AnalogC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e0957cb939ed78036365a4d8012012f";
  }

  static const char* value(const  ::differential_drive::AnalogC_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2e0957cb939ed780ULL;
  static const uint64_t static_value2 = 0x36365a4d8012012fULL;
};

template<class ContainerAllocator>
struct DataType< ::differential_drive::AnalogC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "differential_drive/AnalogC";
  }

  static const char* value(const  ::differential_drive::AnalogC_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::differential_drive::AnalogC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# 8 * uint16 for IR sensors\n\
uint16 ch1\n\
uint16 ch2\n\
uint16 ch3\n\
uint16 ch4\n\
uint16 ch5\n\
uint16 ch6\n\
uint16 ch7\n\
uint16 ch8\n\
\n\
# Say if battery is in use, of if a wall adaptator is present\n\
# value : 1 if on battery, 0 if adaptator present\n\
uint8 on_batt\n\
\n\
# cell voltage\n\
float32 cell1\n\
float32 cell2\n\
float32 cell3\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::differential_drive::AnalogC_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::differential_drive::AnalogC_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::differential_drive::AnalogC_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ch1);
    stream.next(m.ch2);
    stream.next(m.ch3);
    stream.next(m.ch4);
    stream.next(m.ch5);
    stream.next(m.ch6);
    stream.next(m.ch7);
    stream.next(m.ch8);
    stream.next(m.on_batt);
    stream.next(m.cell1);
    stream.next(m.cell2);
    stream.next(m.cell3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AnalogC_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differential_drive::AnalogC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::differential_drive::AnalogC_<ContainerAllocator> & v) 
  {
    s << indent << "ch1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch1);
    s << indent << "ch2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch2);
    s << indent << "ch3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch3);
    s << indent << "ch4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch4);
    s << indent << "ch5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch5);
    s << indent << "ch6: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch6);
    s << indent << "ch7: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch7);
    s << indent << "ch8: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch8);
    s << indent << "on_batt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.on_batt);
    s << indent << "cell1: ";
    Printer<float>::stream(s, indent + "  ", v.cell1);
    s << indent << "cell2: ";
    Printer<float>::stream(s, indent + "  ", v.cell2);
    s << indent << "cell3: ";
    Printer<float>::stream(s, indent + "  ", v.cell3);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIFFERENTIAL_DRIVE_MESSAGE_ANALOGC_H

