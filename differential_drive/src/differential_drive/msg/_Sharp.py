"""autogenerated by genpy from differential_drive/Sharp.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Sharp(genpy.Message):
  _md5sum = "9e17fb25fb2f8b8cf0b60887d5e8cc66"
  _type = "differential_drive/Sharp"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 u0
uint16 u1
uint16 u2
uint16 u3
uint16 u4
uint16 u5
uint16 u6
uint16 u7

"""
  __slots__ = ['u0','u1','u2','u3','u4','u5','u6','u7']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u0,u1,u2,u3,u4,u5,u6,u7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Sharp, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.u0 is None:
        self.u0 = 0
      if self.u1 is None:
        self.u1 = 0
      if self.u2 is None:
        self.u2 = 0
      if self.u3 is None:
        self.u3 = 0
      if self.u4 is None:
        self.u4 = 0
      if self.u5 is None:
        self.u5 = 0
      if self.u6 is None:
        self.u6 = 0
      if self.u7 is None:
        self.u7 = 0
    else:
      self.u0 = 0
      self.u1 = 0
      self.u2 = 0
      self.u3 = 0
      self.u4 = 0
      self.u5 = 0
      self.u6 = 0
      self.u7 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8H.pack(_x.u0, _x.u1, _x.u2, _x.u3, _x.u4, _x.u5, _x.u6, _x.u7))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.u0, _x.u1, _x.u2, _x.u3, _x.u4, _x.u5, _x.u6, _x.u7,) = _struct_8H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8H.pack(_x.u0, _x.u1, _x.u2, _x.u3, _x.u4, _x.u5, _x.u6, _x.u7))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.u0, _x.u1, _x.u2, _x.u3, _x.u4, _x.u5, _x.u6, _x.u7,) = _struct_8H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8H = struct.Struct("<8H")
